name: Build

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  clang_format:
    name: Check Clang-Format
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Checkout Submodules
        run: git submodule update --init plugins
      - name: Download Clang-Format
        run: |
          sudo apt-get update -y
          sudo apt-get install -y clang-format
      - name: Run Clang-Format
        run: ./clang-format.sh
      - name: Compare Results
        run: |
          DIFF=$(git diff)
          if [ ! -z "$DIFF" ]; then echo $DIFF && exit 1; fi

  comment_percentage:
    name: Check Comment Percentage
    runs-on: ubuntu-18.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Current Repository
        uses: actions/checkout@v2
        with:
          path: current
          ref: ${{ github.ref }}
      - name: Checkout Base Repository
        uses: actions/checkout@v2
        with:
          path: base
          ref: ${{ github.base_ref }}
      - name: Checkout Current Submodules
        run: cd $GITHUB_WORKSPACE/current && git submodule update --init plugins
      - name: Checkout Base Submodules
        run: cd $GITHUB_WORKSPACE/base && git submodule update --init plugins
      - name: Download Cloc
        run: |
          sudo apt-get update -y
          sudo apt-get install -y cloc
      - name: Run Cloc
        run: |
          BASE="$(base/cloc.sh --percentage-only)"
          CURRENT="$(current/cloc.sh --percentage-only)"
          echo "Percentage of Comments in Base Repository: $BASE"
          echo "Percentage of Comments after Merge: $CURRENT"
          if (( $(echo "$BASE > $CURRENT" |bc -l) ))
          then
            awk -v a=$CURRENT -v b=$BASE 'BEGIN {printf "Percentage decreased! (%3.4f%)\n", (a-b)}'
            exit 1
          else
            awk -v a=$CURRENT -v b=$BASE 'BEGIN {printf "Percentage increased! (%3.4f%)\n", (a-b)}'
          fi

  build_linux_gcc:
    name: Linux GCC 7.5.0
    runs-on: ubuntu-18.04
    if: >
      github.event_name == 'pull_request' ||
      ( contains(github.ref, 'master') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      ( contains(github.ref, 'develop') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      contains(github.event.head_commit.message, '[run-ci]')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Checkout Submodules
        run: git submodule update --init
      - name: Cache Object Files
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: gcc-${{ github.sha }}
          restore-keys: gcc-
      - name: Download Dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev libx11-dev
          sudo apt-get install libxi-dev libgconf-2-4 ccache lcov xvfb
          ccache --max-size 1G
          ccache -z
      - name: Build Externals
        env: #Thanks to ccache, it build actually faster without these options.
          COSMOSCOUT_NO_PCH: true
          COSMOSCOUT_NO_UNITY_BUILD: true
        run: >
          ./make_externals.sh -G "Unix Makefiles"
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
      - name: Build CosmoScout VR
        run: >
          ./make.sh -G "Unix Makefiles"
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCOSMOSCOUT_COVERAGE_INFO=On -DCOSMOSCOUT_UNIT_TESTS=On
          -DBOOST_ROOT=$BOOST_ROOT_1_69_0 -DBoost_ARCHITECTURE=-x64
      - name: Run Tests
        run: ./install/linux-Release/bin/run_tests.sh
      - name: Run Graphical Tests
        run: ./install/linux-Release/bin/run_graphical_tests.sh
      - name: Upload Results of Failed Test
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: graphical-test-results-gcc
          path: install/linux-Release/bin/test
      - name: Calculate Test Coverage
        run: ./lcov.sh
      - name: Upload Coverage Info
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./build/linux-Release/coverage.info
      - name: Print ccache Statistics
        run: ccache -s

  build_linux_clang:
    name: Linux Clang 8.0
    runs-on: ubuntu-18.04
    if: >
      github.event_name == 'pull_request' ||
      ( contains(github.ref, 'master') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      ( contains(github.ref, 'develop') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      contains(github.event.head_commit.message, '[run-ci]')
    env:
      CC: clang-8
      CXX: clang++-8
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Checkout Submodules
        run: git submodule update --init
      - name: Cache Object Files
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: clang-${{ github.sha }}
          restore-keys: clang-
      - name: Download Dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev libx11-dev
          sudo apt-get install libxi-dev libgconf-2-4 ccache
          ccache --max-size 1G
          ccache -z
      - name: Build Externals
        env: #Thanks to ccache, it build actually faster without these options.
          COSMOSCOUT_NO_PCH: true
          COSMOSCOUT_NO_UNITY_BUILD: true
        run: >
          ./make_externals.sh -G "Unix Makefiles"
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
      - name: Build CosmoScout VR
        run: >
          ./make.sh -G "Unix Makefiles"
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCOSMOSCOUT_UNIT_TESTS=On -DBOOST_ROOT=$BOOST_ROOT_1_69_0 -DBoost_ARCHITECTURE=-x64
      - name: Run Tests
        run: ./install/linux-Release/bin/run_tests.sh
      - name: Run Graphical Tests
        run: ./install/linux-Release/bin/run_graphical_tests.sh
      - name: Upload Results of Failed Test
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: graphical-test-results-clang
          path: install/linux-Release/bin/test
      - name: Print ccache Statistics
        run: ccache -s

  build_windows:
    name: Windows MSVC 19.25
    runs-on: windows-2019
    if: >
      github.event_name == 'pull_request' ||
      ( contains(github.ref, 'master') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      ( contains(github.ref, 'develop') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      contains(github.event.head_commit.message, '[run-ci]')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Checkout Submodules
        run: git submodule update --init
      - name: Cache Object Files
        uses: actions/cache@v1.1.0
        with:
          path: ~/clcache
          key: msvc-${{ github.sha }}
          restore-keys: msvc-
      - name: Download Dependencies
        run: |
          pip install clcache
          clcache -M 2147483648
          clcache -z
      - name: Build Externals
        shell: cmd
        run: >
          make_externals.bat -G "Visual Studio 16 2019" -A x64
          -DCMAKE_VS_GLOBALS="CLToolExe=clcache.exe;TrackFileAccess=false"
      - name: Build CosmoScout VR
        shell: cmd
        run: >
          make.bat -G "Visual Studio 16 2019" -A x64
          -DCMAKE_VS_GLOBALS="CLToolExe=clcache.exe;TrackFileAccess=false"
          -DCOSMOSCOUT_UNIT_TESTS=On -DBOOST_ROOT=%BOOST_ROOT_1_72_0%
      - name: Run Tests
        shell: cmd
        run: install\\windows-Release\\bin\\run_tests.bat
      - name: Print clcache Statistics
        run: clcache -s
