////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
////////////////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: German Aerospace Center (DLR) <cosmoscout@dlr.de>
// SPDX-License-Identifier: MIT

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform sampler2D uGlareMipMap;
layout(rgba32f, binding = 2) writeonly uniform image2D uOutGlare;

// 4x4 bicubic filter using 4 bilinear texture lookups
// See GPU Gems 2: "Fast Third-Order Texture Filtering", Sigg & Hadwiger:
// http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter20.html

// w0, w1, w2, and w3 are the four cubic B-spline basis functions
float w0(float a) {
  return (1.0 / 6.0) * (a * (a * (-a + 3.0) - 3.0) + 1.0);
}

float w1(float a) {
  return (1.0 / 6.0) * (a * a * (3.0 * a - 6.0) + 4.0);
}

float w2(float a) {
  return (1.0 / 6.0) * (a * (a * (-3.0 * a + 3.0) + 3.0) + 1.0);
}

float w3(float a) {
  return (1.0 / 6.0) * (a * a * a);
}

// g0 and g1 are the two amplitude functions
float g0(float a) {
  return w0(a) + w1(a);
}

float g1(float a) {
  return w2(a) + w3(a);
}

// h0 and h1 are the two offset functions
float h0(float a) {
  return -1.0 + w1(a) / (w0(a) + w1(a));
}

float h1(float a) {
  return 1.0 + w3(a) / (w2(a) + w3(a));
}

vec3 texture2DBicubic(sampler2D tex, vec2 uv, int p_lod) {
  float lod        = float(p_lod);
  vec2  tex_size   = textureSize(uGlareMipMap, p_lod);
  vec2  pixel_size = 1.0 / tex_size;
  uv               = uv * tex_size + 0.5;
  vec2 iuv         = floor(uv);
  vec2 fuv         = fract(uv);

  float g0x = g0(fuv.x);
  float g1x = g1(fuv.x);
  float h0x = h0(fuv.x);
  float h1x = h1(fuv.x);
  float h0y = h0(fuv.y);
  float h1y = h1(fuv.y);

  vec2 p0 = (vec2(iuv.x + h0x, iuv.y + h0y) - 0.5) * pixel_size;
  vec2 p1 = (vec2(iuv.x + h1x, iuv.y + h0y) - 0.5) * pixel_size;
  vec2 p2 = (vec2(iuv.x + h0x, iuv.y + h1y) - 0.5) * pixel_size;
  vec2 p3 = (vec2(iuv.x + h1x, iuv.y + h1y) - 0.5) * pixel_size;

  return (g0(fuv.y) * (g0x * textureLod(tex, p0, lod).rgb + g1x * textureLod(tex, p1, lod).rgb)) +
         (g1(fuv.y) * (g0x * textureLod(tex, p2, lod).rgb + g1x * textureLod(tex, p3, lod).rgb));
}

// This pass accumulates the glare values from the glare mipmap into the output layer.
void main() {

  ivec2 pixelPos   = ivec2(gl_GlobalInvocationID.xy);
  ivec2 outputSize = imageSize(uOutGlare);

  // Discard any threads outside the output layer.
  if (pixelPos.x >= outputSize.x || pixelPos.y >= outputSize.y) {
    return;
  }

  vec3  glare     = vec3(0);
  float maxLevels = textureQueryLevels(uGlareMipMap);

  float totalWeight = 0;

  vec2 vTexcoords = (pixelPos + vec2(0.5)) / textureSize(uGlareMipMap, 0);

  // Each level contains a successively more blurred version of the scene. We have to
  // accumulate them with an exponentially decreasing weight to get a proper glare distribution.
  for (int i = 0; i < maxLevels; ++i) {
    float weight = 1.0 / (1 << i);
#ifdef BICUBIC_GLARE_FILTER
    glare += texture2DBicubic(uGlareMipMap, vTexcoords, i) * weight;
#else
    glare += textureLod(uGlareMipMap, vTexcoords, float(i)).rgb * weight;
#endif
    totalWeight += weight;
  }

  vec3 final_glare_value = glare / totalWeight;

  //  Finally store the glare value in the output layer of the glare mipmap.
  imageStore(uOutGlare, pixelPos, vec4(final_glare_value, 0.0));
}