////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
////////////////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: German Aerospace Center (DLR) <cosmoscout@dlr.de>
// SPDX-License-Identifier: MIT

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

#if NUM_MULTISAMPLES > 0
    layout (rgba32f, binding = 0) readonly uniform image2DMS uInHDRBuffer;
#else
    layout (rgba32f, binding = 0) readonly uniform image2D uInHDRBuffer;
#endif

layout (rg32f, binding = 1) uniform image1D uOutLuminance;

// Returns the luminance for the pixel.
float sampleHDRBuffer(ivec2 pos) {
    #if NUM_MULTISAMPLES > 0
      vec3 color = vec3(0.0);
    for (int i = 0; i < NUM_MULTISAMPLES; ++i) {
        color += imageLoad(uInHDRBuffer, pos, i).rgb;
    }
    color /= NUM_MULTISAMPLES;
    #else
      vec3 color = imageLoad(uInHDRBuffer, pos).rgb;
    #endif
    return max(max(color.r, color.g), color.b);
}

ivec2 indexToPos(uint index, int width) {
    return ivec2(index % width, index / width);
}

// The workgroup size will be subgroupSize squared.
layout (local_size_x = WORKGROUP_SIZE) in;

// Each subgroup gets a space in shared memory.
shared float sSum[SUBGROUP_SIZE];
shared float sMax[SUBGROUP_SIZE];

// This shader makes great use of subgroup optimization. We will have subgroupSize squared
// threads. This allows us to calculate the sum and max in just three steps:
// 1. Step: Each thread grabs two values from the HDR buffer
// 2. Step: Each subgroup reduces their values and write their single result into shared memory.
// 3. Step: The first subgroup fetches the values from shared memory and reduces them to a
//          single value. This value will be written to the output buffer.
void main() {
    ivec2 bufferSize = imageSize(uInHDRBuffer);
    int   maxSize    = bufferSize.x * bufferSize.y;

    // 1. Step
    // Each thread grabs two values from the HDR buffer. We need to be careful with the indexing
    // here, so that neighboring threads access neighboring indices in both calls.
    uint  i    = gl_WorkGroupID.x * gl_WorkGroupSize.x * 2 + gl_LocalInvocationID.x;
    float left = i < maxSize ? sampleHDRBuffer(indexToPos(i, bufferSize.x)) : 0;

    uint  j     = i + gl_WorkGroupSize.x;
    float right = j < maxSize ? sampleHDRBuffer(indexToPos(j, bufferSize.x)) : 0;

    // 2. Step
    // All threads in a subgroup will sum their values up and calculate their max.
    float initialSum = subgroupAdd(left + right);
    float initialMax = subgroupMax(max(left, right));

    // The subgroup max and sum are being combined and written to this subgroups shared memory
    // address.
    if (subgroupElect()) {
        sSum[gl_SubgroupID] = initialSum;
        sMax[gl_SubgroupID] = initialMax;
    }

    // Wait for all threads in the work group to finish.
    memoryBarrierShared();
    barrier();

    // 3. Step
    // The lowest indexed subgroup grab the remaining values from shared memory and reduce them.
    // The result is written to the output buffer at the location of this work groups id.
    if (gl_SubgroupID == 0) {
        float sum = subgroupAdd(sSum[gl_SubgroupInvocationID]);
        float max = subgroupMax(sMax[gl_SubgroupInvocationID]);
        if (subgroupElect()) {
            imageStore(uOutLuminance, int(gl_WorkGroupID.x), vec4(sum, max, 0.0, 0.0));
        }
    }
}
