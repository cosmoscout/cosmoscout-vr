////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
////////////////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: German Aerospace Center (DLR) <cosmoscout@dlr.de>
// SPDX-License-Identifier: MIT

#include "Graph.hpp"

#include "../../../../../src/cs-utils/filesystem.hpp"
#include "../../types/CoverageContainer.hpp"

namespace csp::visualquery {

////////////////////////////////////////////////////////////////////////////////////////////////////

const std::string Graph::sName = "Graph";

////////////////////////////////////////////////////////////////////////////////////////////////////

std::string Graph::sSource() {
  return cs::utils::filesystem::loadToString("../share/resources/nodes/csp-visual-query/Graph.js");
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::unique_ptr<Graph> Graph::sCreate() {
  return std::make_unique<Graph>();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::string const& Graph::getName() const {
  return sName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Graph::process() {
  auto           image = readInput<std::shared_ptr<Image1D>>("dataIn", nullptr);
  nlohmann::json json;

  if (image != nullptr) {
    std::vector<double> data;
    std::visit(
        [&data](auto const& values) {
          for (auto const& value : values) {
            data.push_back(static_cast<double>(value[0]));
          }
        },
        image->mPoints);

    json["data"] = data;
  }
  sendMessageToJS(json);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

nlohmann::json Graph::getData() const {
  return nlohmann::json();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Graph::setData(nlohmann::json const& json) {
}

////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace csp::visualquery
